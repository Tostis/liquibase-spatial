<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
   xmlns:spatial="http://www.liquibase.org/xml/ns/dbchangelog-ext/liquibase-spatial"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd 
         http://www.liquibase.org/xml/ns/dbchangelog-ext/liquibase-spatial http://lonnyj.github.io/liquibase-spatial/liquibase-spatial.xsd">
   <include file="properties.xml"/>

   <changeSet id="Spatialize DB" author="test" dbms="derby, h2">
      <sql dbms="derby">create procedure InitGeoDB ()
         language java
         external
         name 'geodb.GeoDB.InitGeoDBProc'
         parameter style java
         modifies
         sql data;
      </sql>
      <sql dbms="h2">CREATE ALIAS InitGeoDB for "geodb.GeoDB.InitGeoDB"</sql>
      <sql dbms="derby, h2">CALL InitGeoDB()</sql>
      <rollback>
         <sql dbms="derby">DROP PROCEDURE InitGeoDB</sql>
         <sql dbms="h2">DROP ALIAS InitGeoDB</sql>
      </rollback>
   </changeSet>

   <changeSet id="Drop test table" author="test">
      <preConditions onFail="MARK_RAN">
         <tableExists tableName="TEST" />
      </preConditions>
      <dropTable tableName="TEST" />
      <rollback />
   </changeSet>

   <changeSet id="Create test table" author="test">
      <preConditions>
         <spatial:spatialSupported />
      </preConditions>
      <createTable tableName="TEST">
         <column name="ID" type="BIGINT">
            <constraints nullable="false" primaryKey="true" primaryKeyName="TEST_PK" />
         </column>
         <column name="GEOM" type="GEOMETRY(POINT,4326)">
            <constraints nullable="false" />
         </column>
      </createTable>
      <modifySql dbms="mysql">
         <append value=" ENGINE=MyISAM"/>
      </modifySql>
   </changeSet>

   <changeSet id="Verify geometry_columns inserted" author="test" dbms="derby, h2, postgresql">
      <preConditions>
         <sqlCheck expectedResult="1">
            SELECT count(*)
            FROM geometry_columns
            WHERE f_table_schema = ${current_schema_sql}
            AND upper(f_table_name) = 'TEST'
            AND upper(f_geometry_column) = 'GEOM'
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Create spatial index" author="test">
      <preConditions>
         <tableExists tableName="TEST" />
         <not>
            <spatial:spatialIndexExists tableName="TEST" columnNames="GEOM" />
         </not>
      </preConditions>
      <spatial:createSpatialIndex tableName="TEST" indexName="TEST_GEOM_IDX" srid="4326">
         <column name="GEOM" />
      </spatial:createSpatialIndex>
   </changeSet>

   <changeSet id="Insert spatial data" author="test">
      <preConditions>
         <spatial:spatialIndexExists tableName="TEST"
            columnNames="GEOM" />
      </preConditions>
      <insert tableName="TEST">
         <column name="ID" value="1" />
         <column name="GEOM" value="SRID=4326;POINT (-5 -5)" />
      </insert>
      <insert tableName="TEST">
         <column name="ID" value="2" />
         <column name="GEOM" value="SRID=4326;POINT (0 0)" />
      </insert>
      <insert tableName="TEST">
         <column name="ID" value="3" />
         <column name="GEOM" value="SRID=4326;POINT (5 5)" />
      </insert>
      <rollback>
         <!-- Hatbox/Derby don't like deleting everything from the table in one statement. -->
         <delete tableName="TEST">
            <where>ID = 3</where>
         </delete>
         <delete tableName="TEST">
            <where>ID = 2</where>
         </delete>
         <delete tableName="TEST">
            <where>ID = 1</where>
         </delete>
      </rollback>
   </changeSet>

   <changeSet id="Query spatial data" author="test" dbms="derby">
      <preConditions>
         <rowCount tableName="TEST" expectedRows="3" />
         <sqlCheck expectedResult="POINT (0 0)">
            SELECT ST_AsText(t.geom)
            FROM TEST t 
            INNER JOIN table(HATBOX.MBR_INTERSECTS_ENV(${current_schema_sql}, 'TEST', -2, 2, -2, 2)) i 
            ON t.ID = i.HATBOX_JOIN_ID
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Query spatial data" author="test" dbms="h2">
      <preConditions>
         <rowCount tableName="TEST" expectedRows="3" />
         <sqlCheck expectedResult="POINT (0 0)">
            SELECT ST_AsText(geom)
            FROM TEST WHERE id IN (
               SELECT CAST(HATBOX_JOIN_ID AS INT) 
               FROM HATBOX_MBR_INTERSECTS_ENV(${current_schema_sql}, 'TEST', -2, 2, -2, 2))
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Query spatial data" author="test" dbms="mysql">
      <preConditions>
         <rowCount tableName="TEST" expectedRows="3" />
         <sqlCheck expectedResult="POINT(0 0)">
            SELECT AsText(geom)
            FROM TEST
            WHERE Intersects(geom, GeomFromText('POLYGON ((-2 -2, -2 2, 2 2, 2 -2, -2 -2))', 4326))
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Query spatial data" author="test" dbms="oracle">
      <preConditions>
         <rowCount tableName="TEST" expectedRows="3" />
         <!-- The Oracle check should just require "= 'TRUE'" but that wasn't working. -->
         <sqlCheck expectedResult="POINT (0.0 0.0)">
            SELECT t.geom.Get_WKT()
            FROM TEST t 
            WHERE SDO_ANYINTERACT(t.geom, 
                                  SDO_GEOMETRY('POLYGON ((-2 -2, -2 2, 2 2, 2 -2, -2 -2))', 8307)) LIKE '%TRUE%'
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Query spatial data" author="test" dbms="postgresql">
      <preConditions>
         <rowCount tableName="TEST" expectedRows="3" />
         <sqlCheck expectedResult="POINT(0 0)">
            SELECT ST_AsText(geom)
            FROM TEST
            WHERE ST_Intersects(geom,
                                ST_GeomFromEWKT('SRID=4326;POLYGON ((-2 -2, -2 2, 2 2, 2 -2, -2 -2))'))
         </sqlCheck>
      </preConditions>
   </changeSet>

   <changeSet id="Drop spatial index" author="test">
      <preConditions>
         <spatial:spatialIndexExists tableName="TEST"
            columnNames="GEOM" />
      </preConditions>
      <spatial:dropSpatialIndex tableName="TEST" indexName="TEST_GEOM_IDX" />
      <rollback />
   </changeSet>

   <changeSet id="Verify spatial index dropped" author="test">
      <preConditions>
         <not>
            <spatial:spatialIndexExists tableName="TEST" columnNames="GEOM" />
         </not>
      </preConditions>
   </changeSet>

   <changeSet id="Drop table" author="test">
      <preConditions>
         <tableExists tableName="TEST" />
      </preConditions>
      <dropTable tableName="TEST" />
      <rollback changeSetId="Create test table" changeSetAuthor="test" />
      <rollback changeSetId="Create spatial index" changeSetAuthor="test" />
      <rollback changeSetId="Insert spatial data" changeSetAuthor="test" />
   </changeSet>

   <changeSet id="Verify geometry_columns deleted" author="test" dbms="derby, h2, postgresql">
      <preConditions>
         <sqlCheck expectedResult="0">
            SELECT count(*)
            FROM geometry_columns
            WHERE f_table_schema = ${current_schema_sql}
            AND upper(f_table_name) = 'TEST'
            AND upper(f_geometry_column) = 'GEOM'
         </sqlCheck>
      </preConditions>
   </changeSet>
</databaseChangeLog>
